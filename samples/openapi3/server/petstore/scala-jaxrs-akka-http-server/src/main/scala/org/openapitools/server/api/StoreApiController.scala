/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.Order
import scala.concurrent.{ExecutionContext, Future}
import akka.http.scaladsl.marshalling.ToResponseMarshaller
import akka.http.scaladsl.unmarshalling.FromRequestUnmarshaller
import akka.http.scaladsl.model.Multipart
import akka.stream.scaladsl.StreamConverters
import akka.stream.Materializer
import akka.http.scaladsl.model.Multipart.BodyPart
import akka.stream.scaladsl.FileIO
import scala.concurrent.duration._
import akka.http.scaladsl.model.StatusCodes
import scala.util.Success
import spray.json._

class StoreApiController(api: StoreApiSpec[Future])
  (implicit ec: ExecutionContext, materializer: Materializer) extends AbstractApi {

  import org.openapitools.server.model.ModelFormats._

  override def routes = pathPrefix("store") { 
    path( "order" / Segment ) { (orderId)  =>
      delete { extractRequest { request =>      
      
      
      
         onComplete( api.deleteOrder(orderId) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
      
    }}} ~ 
    path( "inventory") { 
      get { extractRequest { request =>
      
      
      
      
         onComplete( api.getInventory() ) {
            case Success(result) => complete(result)
         }
      
      
      
    }}} ~ 
    path( "order" / LongNumber ) { (orderId)  =>
      get { extractRequest { request =>
      
      
      
      
         onComplete( api.getOrderById(orderId) ) {
            case Success(result) => complete(result)
         }
      
      
      
    }}} ~ 
    path( "order") { 
      post { extractRequest { request =>
      
          entity(as[Order]) { order =>
      
      
      
         onComplete( api.placeOrder(order) ) {
            case Success(result) => complete(result)
         }
      
      
       } 
    }}}
  }
}
