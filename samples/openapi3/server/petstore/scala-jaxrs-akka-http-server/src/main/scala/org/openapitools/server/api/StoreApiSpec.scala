/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.Order

import javax.ws.rs.*;

    import io.swagger.annotations.*;


@Path("/Store")
    @Api(description = "the Store API")
trait StoreApi {

    @DELETE
    @Operation(
      value = "Delete purchase order by ID",
      notes = "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors", }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 400, message = "Invalid ID supplied", response = .class),
//        @ApiResponse(code = 404, message = "Order not found", response = .class) })
 deleteOrder(@ApiParam(value = "ID of the order that needs to be deleted",required=true) @PathParam("orderId") String orderId
)

    @GET
    @Produces(Array( "application/json" ))
    @Operation(
      value = "Returns pet inventories by status",
      notes = "Returns a map of status codes to quantities",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 200,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[Integer]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "api_key")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Integer.class, responseContainer = "map") })
Map[String, Integer] getInventory()

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Find purchase order by ID",
      notes = "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions", }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
//        @ApiResponse(code = 400, message = "Invalid ID supplied", response = .class),
//        @ApiResponse(code = 404, message = "Order not found", response = .class) })
Order getOrderById(@ApiParam(value = "ID of pet that needs to be fetched",required=true) @PathParam("orderId") Long orderId
)

    @POST
    @Consumes(Array( "application/json" ))
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Place an order for a pet",
      notes = "", }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Order.class),
//        @ApiResponse(code = 400, message = "Invalid Order", response = .class) })
Order placeOrder(@ApiParam(value = "order placed for purchasing the pet" ,required=true) Order order
)
    }
