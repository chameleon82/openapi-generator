/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.ApiResponse
import java.io.File
import org.openapitools.server.model.Pet

import javax.ws.rs._
import java.io.InputStream
import io.swagger.v3.oas.annotations._
import io.swagger.v3.oas.annotations.enums._
import io.swagger.v3.oas.annotations.media.{Content, Schema}
import io.swagger.v3.oas.annotations.responses
import io.swagger.v3.oas.annotations.tags.{Tag, Tags}
import io.swagger.v3.oas.annotations.security.{SecurityRequirement, SecurityRequirements}



@Path("/pet")
trait PetApiSpec {

  @POST
  @Consumes(Array("application/json", "application/xml"))
  @Operation(
    summary = "Add a new pet to the store",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("write:pets","read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "405",
        description = "Invalid input"
      )
    )
  )
  def addPet(
      @Parameter(name = "Pet object that needs to be added to the store", in = ParameterIn.DEFAULT, required = true)  pet:Pet
  ): Unit

  @DELETE
  @Path("/{petId}")
  @Operation(
    summary = "Deletes a pet",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("write:pets","read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid pet value"
      )
    )
  )
  def deletePet(
      @Parameter(name = "petId", in = ParameterIn.PATH , required = true, description = "Pet id to delete") @PathParam("petId") petId:Long, 
      @Parameter(name = "", in = ParameterIn.HEADER)@HeaderParam("api_key") apiKey:String
  ): Unit

  @GET
  @Path("/findByStatus")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Finds Pets by status",
    description = "Multiple status values can be provided with comma separated strings",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Pet])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid status value"
      )
    )
  )
  def findPetsByStatus(
      @Parameter(name = "Status values that need to be considered for filter", in = ParameterIn.QUERY,required=true)@QueryParam("status") status:List[String]
  ): List[Pet]

  @GET
  @Path("/findByTags")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Finds Pets by tags",
    description = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Pet])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid tag value"
      )
    )
  )
  def findPetsByTags(
      @Parameter(name = "Tags to filter by", in = ParameterIn.QUERY,required=true)@QueryParam("tags") tags:List[String], 
      @Parameter(name = "Maximum number of items to return", in = ParameterIn.QUERY)@QueryParam("maxCount") maxCount:Integer
  ): List[Pet]

  @GET
  @Path("/{petId}")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Find pet by ID",
    description = "Returns a single pet",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Pet])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid ID supplied"
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "Pet not found"
      )
    )
  )
  def getPetById(
      @Parameter(name = "petId", in = ParameterIn.PATH , required = true, description = "ID of pet to return") @PathParam("petId") petId:Long
  ): Pet

  @PUT
  @Consumes(Array("application/json", "application/xml"))
  @Operation(
    summary = "Update an existing pet",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("write:pets","read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid ID supplied"
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "Pet not found"
      ), 
      new responses.ApiResponse(
        responseCode = "405",
        description = "Validation exception"
      )
    )
  )
  def updatePet(
      @Parameter(name = "Pet object that needs to be added to the store", in = ParameterIn.DEFAULT, required = true)  pet:Pet
  ): Unit

  @POST
  @Path("/{petId}")
  @Consumes(Array("application/x-www-form-urlencoded"))
  @Operation(
    summary = "Updates a pet in the store with form data",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("write:pets","read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "405",
        description = "Invalid input"
      )
    )
  )
  def updatePetWithForm(
      @Parameter(name = "petId", in = ParameterIn.PATH , required = true, description = "ID of pet that needs to be updated") @PathParam("petId") petId:Long, 
      @Parameter(name = "Updated name of the pet")  @FormParam("name") name:String, 
      @Parameter(name = "Updated status of the pet")  @FormParam("status") status:String
  ): Unit

  @POST
  @Path("/{petId}/uploadImage")
  @Consumes(Array("multipart/form-data"))
  @Produces(Array("application/json"))
  @Operation(
    summary = "uploads an image",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "pet", description = "Everything about your Pets"))
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key", scopes = Array("write:pets","read:pets"))
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[ApiResponse])))
      )
    )
  )
  def uploadFile(
      @Parameter(name = "petId", in = ParameterIn.PATH , required = true, description = "ID of pet to update") @PathParam("petId") petId:Long, 
      @Parameter(name = "Additional data to pass to server")  @FormParam("additionalMetadata") additionalMetadata:String, 
      @FormParam("file") fileInputStream: InputStream
  ): ApiResponse
}
