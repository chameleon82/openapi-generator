/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.ApiResponse
import java.io.File
import org.openapitools.server.model.Pet

import javax.ws.rs.*;

    import io.swagger.annotations.*;


@Path("/Pet")
    @Api(description = "the Pet API")
trait PetApi {

    @POST
    @Consumes(Array( "application/json", "application/xml" ))
    @Operation(
      value = "Add a new pet to the store",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 405,
            message = Invalid input,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 405, message = "Invalid input", response = .class) })
 addPet(@ApiParam(value = "Pet object that needs to be added to the store" ,required=true) Pet pet
)

    @DELETE
    @Operation(
      value = "Deletes a pet",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 400,
            message = Invalid pet value,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 400, message = "Invalid pet value", response = .class) })
 deletePet(@ApiParam(value = "Pet id to delete",required=true) @PathParam("petId") Long petId
,@ApiParam(value = "" )@HeaderParam("api_key") String apiKey
)

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Finds Pets by status",
      notes = "Multiple status values can be provided with comma separated strings",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 200,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[Pet]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 400,
            message = Invalid status value,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "array"),
//        @ApiResponse(code = 400, message = "Invalid status value", response = .class, responseContainer = "array") })
List[Pet] findPetsByStatus(@ApiParam(value = "Status values that need to be considered for filter",required=true)@QueryParam("status") List[String] status
)

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Finds Pets by tags",
      notes = "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 200,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[Pet]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 400,
            message = Invalid tag value,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Pet.class, responseContainer = "array"),
//        @ApiResponse(code = 400, message = "Invalid tag value", response = .class, responseContainer = "array") })
List[Pet] findPetsByTags(@ApiParam(value = "Tags to filter by",required=true)@QueryParam("tags") List[String] tags
,@ApiParam(value = "Maximum number of items to return")@QueryParam("maxCount") Integer maxCount
)

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Find pet by ID",
      notes = "Returns a single pet",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 200,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[Pet]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 400,
            message = Invalid ID supplied,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 404,
            message = Pet not found,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "api_key")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = Pet.class),
//        @ApiResponse(code = 400, message = "Invalid ID supplied", response = .class),
//        @ApiResponse(code = 404, message = "Pet not found", response = .class) })
Pet getPetById(@ApiParam(value = "ID of pet to return",required=true) @PathParam("petId") Long petId
)

    @PUT
    @Consumes(Array( "application/json", "application/xml" ))
    @Operation(
      value = "Update an existing pet",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 400,
            message = Invalid ID supplied,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 404,
            message = Pet not found,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 405,
            message = Validation exception,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 400, message = "Invalid ID supplied", response = .class),
//        @ApiResponse(code = 404, message = "Pet not found", response = .class),
//        @ApiResponse(code = 405, message = "Validation exception", response = .class) })
 updatePet(@ApiParam(value = "Pet object that needs to be added to the store" ,required=true) Pet pet
)

    @POST
    @Consumes(Array( "application/x-www-form-urlencoded" ))
    @Operation(
      value = "Updates a pet in the store with form data",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 405,
            message = Invalid input,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 405, message = "Invalid input", response = .class) })
 updatePetWithForm(@ApiParam(value = "ID of pet that needs to be updated",required=true) @PathParam("petId") Long petId
,@ApiParam(value = "Updated name of the pet")  @FormParam("name")  String name
,@ApiParam(value = "Updated status of the pet")  @FormParam("status")  String status
)

    @POST
    @Consumes(Array( "multipart/form-data" ))
    @Produces(Array( "application/json" ))
    @Operation(
      value = "uploads an image",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 200,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[ApiResponse]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "petstore_auth", scopes = {
    //@AuthorizationScope(scope = "write:pets", description = "modify pets in your account"),
    //@AuthorizationScope(scope = "read:pets", description = "read your pets")
    //})
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = ApiResponse.class) })
ApiResponse uploadFile(@ApiParam(value = "ID of pet to update",required=true) @PathParam("petId") Long petId
,@ApiParam(value = "Additional data to pass to server")  @FormParam("additionalMetadata")  String additionalMetadata
,
    @FormDataParam("file") InputStream fileInputStream,
    @FormDataParam("file") FormDataContentDisposition fileDetail
)
    }
