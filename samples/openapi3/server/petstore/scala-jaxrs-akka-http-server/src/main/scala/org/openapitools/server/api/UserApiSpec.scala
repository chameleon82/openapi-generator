/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.User

import javax.ws.rs._
import java.io.InputStream
import io.swagger.v3.oas.annotations._
import io.swagger.v3.oas.annotations.enums._
import io.swagger.v3.oas.annotations.media.{Content, Schema}
import io.swagger.v3.oas.annotations.responses
import io.swagger.v3.oas.annotations.tags.{Tag, Tags}
import io.swagger.v3.oas.annotations.security.{SecurityRequirement, SecurityRequirements}



@Path("/user")
trait UserApiSpec {

  @POST
  @Consumes(Array("application/json"))
  @Operation(
    summary = "Create user",
    description = "This can only be done by the logged in user.",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "0",
        description = "successful operation"
      )
    )
  )
  def createUser(
      @Parameter(name = "Created user object", in = ParameterIn.DEFAULT, required = true)  user:User
  ): Unit

  @POST
  @Path("/createWithArray")
  @Consumes(Array("application/json"))
  @Operation(
    summary = "Creates list of users with given input array",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "0",
        description = "successful operation"
      )
    )
  )
  def createUsersWithArrayInput(
      @Parameter(name = "List of user object", in = ParameterIn.DEFAULT, required = true)  user:List[User]
  ): Unit

  @POST
  @Path("/createWithList")
  @Consumes(Array("application/json"))
  @Operation(
    summary = "Creates list of users with given input array",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "0",
        description = "successful operation"
      )
    )
  )
  def createUsersWithListInput(
      @Parameter(name = "List of user object", in = ParameterIn.DEFAULT, required = true)  user:List[User]
  ): Unit

  @DELETE
  @Path("/{username}")
  @Operation(
    summary = "Delete user",
    description = "This can only be done by the logged in user.",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid username supplied"
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "User not found"
      )
    )
  )
  def deleteUser(
      @Parameter(name = "username", in = ParameterIn.PATH , required = true, description = "The name that needs to be deleted") @PathParam("username") username:String
  ): Unit

  @GET
  @Path("/{username}")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Get user by user name",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[User])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid username supplied"
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "User not found"
      )
    )
  )
  def getUserByName(
      @Parameter(name = "username", in = ParameterIn.PATH , required = true, description = "The name that needs to be fetched. Use user1 for testing.") @PathParam("username") username:String
  ): User

  @GET
  @Path("/login")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Logs user into the system",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[String])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid username/password supplied"
      )
    )
  )
  def loginUser(
      @Parameter(name = "The user name for login", in = ParameterIn.QUERY,required=true)@QueryParam("username") username:String, 
      @Parameter(name = "The password for login in clear text", in = ParameterIn.QUERY,required=true)@QueryParam("password") password:String
  ): String

  @GET
  @Path("/logout")
  @Operation(
    summary = "Logs out current logged in user session",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "0",
        description = "successful operation"
      )
    )
  )
  def logoutUser(
  ): Unit

  @PUT
  @Path("/{username}")
  @Consumes(Array("application/json"))
  @Operation(
    summary = "Updated user",
    description = "This can only be done by the logged in user.",
  )
  @Tags(
    value = Array(
        new Tag(name = "user", description = "Operations about user"))
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid user supplied"
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "User not found"
      )
    )
  )
  def updateUser(
      @Parameter(name = "username", in = ParameterIn.PATH , required = true, description = "name that need to be deleted") @PathParam("username") username:String, 
      @Parameter(name = "Updated user object", in = ParameterIn.DEFAULT, required = true)  user:User
  ): Unit
}
