/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.User

import javax.ws.rs.*;

    import io.swagger.annotations.*;


@Path("/User")
    @Api(description = "the User API")
trait UserApi {

    @POST
    @Consumes(Array( "application/json" ))
    @Operation(
      value = "Create user",
      notes = "This can only be done by the logged in user.",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 0,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 0, message = "successful operation", response = .class) })
 createUser(@ApiParam(value = "Created user object" ,required=true) User user
)

    @POST
    @Consumes(Array( "application/json" ))
    @Operation(
      value = "Creates list of users with given input array",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 0,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 0, message = "successful operation", response = .class) })
 createUsersWithArrayInput(@ApiParam(value = "List of user object" ,required=true) List[User] user
)

    @POST
    @Consumes(Array( "application/json" ))
    @Operation(
      value = "Creates list of users with given input array",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 0,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 0, message = "successful operation", response = .class) })
 createUsersWithListInput(@ApiParam(value = "List of user object" ,required=true) List[User] user
)

    @DELETE
    @Operation(
      value = "Delete user",
      notes = "This can only be done by the logged in user.",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 400,
            message = Invalid username supplied,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 404,
            message = User not found,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 400, message = "Invalid username supplied", response = .class),
//        @ApiResponse(code = 404, message = "User not found", response = .class) })
 deleteUser(@ApiParam(value = "The name that needs to be deleted",required=true) @PathParam("username") String username
)

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Get user by user name",
      notes = "", }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = User.class),
//        @ApiResponse(code = 400, message = "Invalid username supplied", response = .class),
//        @ApiResponse(code = 404, message = "User not found", response = .class) })
User getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathParam("username") String username
)

    @GET
    @Produces(Array( "application/xml", "application/json" ))
    @Operation(
      value = "Logs user into the system",
      notes = "", }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 200, message = "successful operation", response = String.class),
//        @ApiResponse(code = 400, message = "Invalid username/password supplied", response = .class) })
String loginUser(@ApiParam(value = "The user name for login",required=true)@QueryParam("username") String username
,@ApiParam(value = "The password for login in clear text",required=true)@QueryParam("password") String password
)

    @GET
    @Operation(
      value = "Logs out current logged in user session",
      notes = "",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 0,
            message = successful operation,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 0, message = "successful operation", response = .class) })
 logoutUser()

    @PUT
    @Consumes(Array( "application/json" ))
    @Operation(
      value = "Updated user",
      notes = "This can only be done by the logged in user.",
      tags={ ,
      responses = Array(
          new ApiResponse(
            responseCode = 400,
            message = Invalid user supplied,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),          new ApiResponse(
            responseCode = 404,
            message = User not found,
            description = ,
            content = Array(
              new Content(
                schema = new Schema(
                  implementation = classOf[]
                )
              )
            )
      ),
    )

    //  authorizations = {
    //@Authorization(value = "auth_cookie")
    //}, }

//    @ApiResponses(value = { 
//        @ApiResponse(code = 400, message = "Invalid user supplied", response = .class),
//        @ApiResponse(code = 404, message = "User not found", response = .class) })
 updateUser(@ApiParam(value = "name that need to be deleted",required=true) @PathParam("username") String username
,@ApiParam(value = "Updated user object" ,required=true) User user
)
    }
