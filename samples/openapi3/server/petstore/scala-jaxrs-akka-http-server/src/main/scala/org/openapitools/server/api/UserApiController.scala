/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.server.api

import org.openapitools.server.model.User
import scala.concurrent.{ExecutionContext, Future}
import akka.http.scaladsl.marshalling.ToResponseMarshaller
import akka.http.scaladsl.unmarshalling.FromRequestUnmarshaller
import akka.http.scaladsl.model.Multipart
import akka.stream.scaladsl.StreamConverters
import akka.stream.Materializer
import akka.http.scaladsl.model.Multipart.BodyPart
import akka.stream.scaladsl.FileIO
import scala.concurrent.duration._
import akka.http.scaladsl.model.StatusCodes
import scala.util.Success
import spray.json._

class UserApiController(api: UserApiSpec[Future])
  (implicit ec: ExecutionContext, materializer: Materializer) extends AbstractApi {

  import org.openapitools.server.model.ModelFormats._

  override def routes = pathPrefix("user") { 
    pathSingleSlash { 
      post { extractRequest { request =>      
          entity(as[User]) { user =>
      
      
      
         onComplete( api.createUser(user) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
       } 
    }}} ~ 
    path( "createWithArray") { 
      post { extractRequest { request =>      
          entity(as[List[User]]) { user =>
      
      
      
         onComplete( api.createUsersWithArrayInput(user) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
       } 
    }}} ~ 
    path( "createWithList") { 
      post { extractRequest { request =>      
          entity(as[List[User]]) { user =>
      
      
      
         onComplete( api.createUsersWithListInput(user) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
       } 
    }}} ~ 
    path( Segment ) { (username)  =>
      delete { extractRequest { request =>      
      
      
      
         onComplete( api.deleteUser(username) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
      
    }}} ~ 
    path( Segment ) { (username)  =>
      get { extractRequest { request =>
      
      
      
      
         onComplete( api.getUserByName(username) ) {
            case Success(result) => complete(result)
         }
      
      
      
    }}} ~ 
    path( "login") { 
      get { extractRequest { request =>
      
      
      
      parameters('username.as[String], 'password.as[String]) { (username, password) => 
         onComplete( api.loginUser(username, password) ) {
            case Success(result) => complete(result)
         }
       } 
      
      
    }}} ~ 
    path( "logout") { 
      get { extractRequest { request =>      
      
      
      
         onComplete( api.logoutUser() ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
      
    }}} ~ 
    path( Segment ) { (username)  =>
      put { extractRequest { request =>      
          entity(as[User]) { user =>
      
      
      
         onComplete( api.updateUser(username, user) ) {
            case Success(result) => complete(StatusCodes.NoContent)
         }
      
      
       } 
    }}}
  }
}
