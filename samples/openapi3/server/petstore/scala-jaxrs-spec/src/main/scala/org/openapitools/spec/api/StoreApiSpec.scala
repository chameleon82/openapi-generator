/**
* OpenAPI Petstore
* This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

package org.openapitools.spec.api

import org.openapitools.spec.model.Order

import javax.ws.rs._
import java.io.InputStream
import javax.validation.Valid
import javax.validation.constraints._
import io.swagger.v3.oas.annotations._
import io.swagger.v3.oas.annotations.enums._
import io.swagger.v3.oas.annotations.media.{Content, Schema, ArraySchema}
import io.swagger.v3.oas.annotations.parameters.RequestBody
import io.swagger.v3.oas.annotations.responses
import io.swagger.v3.oas.annotations.tags.{Tag, Tags}
import io.swagger.v3.oas.annotations.security.{SecurityRequirement, SecurityRequirements}
import scala.language.higherKinds

@Path("/store")
trait StoreApiSpec[T[_]] {

  @DELETE
  @Path("/order/{orderId}")
  @Operation(
    summary = "Delete purchase order by ID",
    description = "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
  )
  @Tags(
    value = Array(
        new Tag(name = "store", description = "Access to Petstore orders"),
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid ID supplied",
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "Order not found",
      )
    )
  )
  def deleteOrder(
      @Parameter(name = "orderId", in = ParameterIn.PATH , required = true, description = "ID of the order that needs to be deleted")
      @PathParam("orderId") orderId: String
): T[Unit]

  @GET
  @Path("/inventory")
  @Produces(Array("application/json"))
  @Operation(
    summary = "Returns pet inventories by status",
    description = "Returns a map of status codes to quantities",
  )
  @Tags(
    value = Array(
        new Tag(name = "store", description = "Access to Petstore orders"),
    )
  )
  @SecurityRequirements(
    value = Array(
      new SecurityRequirement(name = "api_key")
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Integer])))
      )
    )
  )
  def getInventory(
): T[Map[String, Integer]]

  @GET
  @Path("/order/{orderId}")
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Find purchase order by ID",
    description = "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
  )
  @Tags(
    value = Array(
        new Tag(name = "store", description = "Access to Petstore orders"),
    )
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Order])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid ID supplied",
      ), 
      new responses.ApiResponse(
        responseCode = "404",
        description = "Order not found",
      )
    )
  )
  def getOrderById(
      @Parameter(name = "orderId", in = ParameterIn.PATH , required = true, description = "ID of pet that needs to be fetched")
      @PathParam("orderId") orderId: Long
): T[Order]

  @POST
  @Path("/order")
  @Consumes(Array("application/json"))
  @Produces(Array("application/xml", "application/json"))
  @Operation(
    summary = "Place an order for a pet",
    description = "",
  )
  @Tags(
    value = Array(
        new Tag(name = "store", description = "Access to Petstore orders"))
  )
  @responses.ApiResponses(
    value = Array(
      new responses.ApiResponse(
        responseCode = "200",
        description = "successful operation",
        content = Array(new Content(schema = new Schema(implementation = classOf[Order])))
      ), 
      new responses.ApiResponse(
        responseCode = "400",
        description = "Invalid Order",
      )
    )
  )
  def placeOrder(
      @RequestBody(description = "order placed for purchasing the pet", required=true)@NotNull @Valid  order: Order
): T[Order]
}
