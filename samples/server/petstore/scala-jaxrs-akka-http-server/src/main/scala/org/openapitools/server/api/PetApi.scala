/**
  * OpenAPI Petstore
  * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */

package org.openapitools.server.api

import org.openapitools.server.model.ApiResponse
import java.io.File

import akka.http.scaladsl.server
import akka.http.scaladsl.server.Route
import akka.http.scaladsl.server.Directives
import org.openapitools.server.model.Pet

import scala.concurrent.{ExecutionContext, Future}

class PetApi(implicit ex: ExecutionContext) extends AbstractApi {

  val tr: TraitPet = ??? //import org.openapitools.server.api.TraitPet

  //    override def addPetRoute: Route = path("/"  / IntNumber){ x =>
  //        get(
  //            complete(addPetF(x))
  //        )
  //    }

  def mew: Route = path("/" / IntNumber) { x =>
    complete(tr.mew(x))
  }

  def findPetsByStatus = {}

  def findPetsByTags = {}

  def getPetById = {}

  def updatePet = {}

  def updatePetWithForm = {}

  def uploadFile = {}

  //  implicit def ss(s: Future[String]): Route = {
  //    path("/") {get{ { complete("ok")}}}
  //  }

  implicit class X(i: Future[String]) {
    def myMethod: server.Route = path("") {
      get {
        complete("ok")
      }
    }
  }


  import scala.language.implicitConversions

  // object PersonEntity {
  //   implicit def as: Future[String] => Route = Future("ok").myMethod


  //  }*/

  //import PersonEntity.as
  def lol(f: Future[String]) = path("") {
    complete("okee")
  }

  override def addPetR: Future[String] => server.Route = lol //(Future("ok"))//Future("ok") { } //=> .myMethod(

  override def routes: Route = ???
}
